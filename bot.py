import logging
import httpx
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from config import TELEGRAM_BOT_TOKEN, API_AUTH_TOKEN, AUTHORIZED_USERS, API_URL

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

def is_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ."""
    return user_id in AUTHORIZED_USERS


def validate_imei(imei: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ IMEI —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 14 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä."""
    return imei.isdigit() and len(imei) in (14, 15)


async def fetch_imei_info(imei: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI.
    """
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                API_URL,
                json={"imei": imei, "token": API_AUTH_TOKEN},
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {e.response.text}")
            raise Exception("–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise Exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ IMEI.")


@dp.message(Command("start"))
async def start(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if not is_authorized(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


@dp.message()
async def check_imei(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç IMEI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API."""
    if not is_authorized(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    imei = message.text.strip()
    if not validate_imei(imei):
        await message.answer("‚ö†–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. IMEI —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 14 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä.")
        return

    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º IMEI...")

    try:
        data = await fetch_imei_info(imei)

        properties = data.get("properties", {})
        if not properties:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É IMEI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        imei_info = (
            f"- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IMEI {imei}:\n"
            f"- –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {properties.get('deviceName', '‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ GSMA: {'–î–∞' if properties.get('gsmaBlacklisted') else '–ù–µ—Ç'}\n"
            f"- –°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏**: {properties.get('purchaseCountry', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        )

        image_url = properties.get("image")
        if image_url:
            imei_info += f"–§–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({image_url})\n"

        await message.answer(imei_info)
    except Exception as e:
        await message.answer(str(e))


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    async with bot:
        await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
